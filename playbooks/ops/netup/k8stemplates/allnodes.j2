{% set affinity_stress =  { 'prefer': 'preferredDuringSchedulingIgnoredDuringExecution' }
%}
{% set affinity_conf = { 'keyprefix': 'dock',
                         'weight': { 'hlf-fqdn': 60, 'hlf-type': 40, 'hlf-dn': 10 } }
%}

{% if allcas is defined and (allcas | length > 0) %}
# All the ca nodes and services
{%   for node in allcas %}
{%     set nodename=(node.fullname|replace('.','-'))  %}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: {{ nodename }}
  name: {{ nodename }}
  namespace: "{{ NETNAME }}"
spec:
  selector:
    k8s-app: {{ nodename }}
  ports:
  - name: caport
    port: 7054
    targetPort: 7054
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ nodename }}
  namespace: "{{ NETNAME }}"
spec:
  selector:
    matchLabels:
      k8s-app: {{ nodename }}
      hlf-type: {{ node.type }}
      hlf-fqdn: {{ node.fullname }}
      hlf-dn:  {{ node.org }}
      hlf-mspid: {{ node.mspid }}
  serviceName: {{ nodename }}
  replicas: 1
  volumeClaimTemplates:
  - metadata:
      name: {{ nodename }}-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: {{ nodename }}-certs
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Mi
  template:
    metadata:
      labels:
        k8s-app: {{ nodename }}
        hlf-type: {{ node.type }}
        hlf-fqdn: {{ node.fullname }}
        hlf-dn:  {{ node.org }}
        hlf-mspid: {{ node.mspid }}
    spec:
      # in case of statefulset, affinity location is  spec.template.spec.affinity
      # cf. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
      affinity:
          nodeAffinity:
            {{affinity_stress.prefer }}:
              - weight: {{ affinity_conf.weight['hlf-fqdn'] }}
                preference:
                  matchExpressions:
                    - key: {{affinity_conf.keyprefix}}.hlf-fqdn/{{node.fullname}}
                      operator: In
                      values:
                        - "ok"
              - weight: {{affinity_conf.weight['hlf-type']}}
                preference:
                  matchExpressions:
                    - key: {{affinity_conf.keyprefix}}.hlf-type/{{node.type}}
                      operator: In
                      values:
                        - "ok"
              - weight: {{affinity_conf.weight['hlf-dn']}}
                preference:
                  matchExpressions:
                    - key: {{affinity_conf.keyprefix}}.hlf-dn/{{node.org}}
                      operator: In
                      values:
                        - "ok"
      volumes:
      - name: keyfiles
        configMap:
          name: "keyfiles"
      initContainers:
      - name: setup
        image: busybox
        command:
        - sh
        - "-c"
        - |
          set -ex
          echo "/certs mapping: keyfiles/{{ orgattrs[node.org].certpath }}/{{node.org}}/"
          tar xzf /keyfiles/certs.tgz -C /certs --strip=3 `tar tzf /keyfiles/certs.tgz | grep /{{ orgattrs[node.org].certpath }}/{{node.org}}/`
          find /certs
        volumeMounts:
          - { mountPath: "/keyfiles", name: "keyfiles" }
          - { mountPath: "/certs",    name: "{{ nodename }}-certs" }
      containers:
      - name: {{ nodename }}
        image: hyperledger/fabric-ca:1.4
        imagePullPolicy: IfNotPresent
        env:
        - { name: "FABRIC_CA_HOME", value: "/etc/hyperledger/fabric-ca-server" }
        - { name: "FABRIC_CA_SERVER_CA_NAME", value: "{{ node.fullname}}" }
        - { name: "FABRIC_CA_SERVER_CA_KEYFILE", value: "/certs/ca/{{ allkeys[node.org].pkey.split('/')[-1] }}" }
        - { name: "FABRIC_CA_SERVER_CA_CERTFILE", value: "/certs/ca/{{ node.fullname }}-cert.pem"}
        - { name: "FABRIC_CA_SERVER_TLS_ENABLED", value: "true" }
        - { name: "FABRIC_CA_SERVER_TLS_KEYFILE", value: "/certs/ca/{{ allkeys[node.org].pkey.split('/')[-1] }}" }
        - { name: "FABRIC_CA_SERVER_TLS_CERTFILE", value: "/certs/ca/{{ node.fullname }}-cert.pem"}
{%      if fabric.settings is defined and fabric.settings.ca is defined %}
{%        for setting in (fabric.settings.ca|dict2items) %}
        - { name: "{{ setting.key }}",                      value: "{{ setting.value }}" }
{%        endfor %}
{%      endif %}
        volumeMounts:
          - { mountPath: "/etc/hyperledger/fabric-ca-server", name: "{{ nodename }}-data" }
          - { mountPath: "/certs",                        name: "{{ nodename }}-certs" }
        command:
          - sh
          - "-c"
          - |
            {{ node.command }}
{%   endfor %}
{% endif %}

{% if allorderers is defined and (allorderers | length > 0) %}
# All orderer nodes and services
{%   for node in allorderers %}
{%     set nodename=(node.fullname|replace('.','-'))  %}
{%     set canodes=allcas|selectattr('org','equalto', node.org)|list %}
{%     set caname=((canodes|length)>0)|ternary(canodes[0].name, 'ca') %}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: {{ nodename }}
  name: {{ nodename }}
  namespace: "{{ NETNAME }}"
spec:
  selector:
    k8s-app: {{ nodename }}
  ports:
  - name: ordererport
    port: 7050
    targetPort: 7050
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ nodename }}
  namespace: "{{ NETNAME }}"
spec:
  selector:
    matchLabels:
      k8s-app: {{ nodename }}
      hlf-type: {{ node.type }}
      hlf-fqdn: {{ node.fullname }}
      hlf-dn:  {{ node.org }}
      hlf-mspid: {{ node.mspid }}
  serviceName: {{ nodename }}
  replicas: 1
  volumeClaimTemplates:
  - metadata:
      name: {{ nodename }}-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
  - metadata:
      name: {{ nodename }}-certs
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Mi
  template:
    metadata:
      labels:
        k8s-app: {{ nodename }}
        hlf-type: {{ node.type }}
        hlf-fqdn: {{ node.fullname }}
        hlf-dn:  {{ node.org }}
        hlf-mspid: {{ node.mspid }}
    spec:
      affinity:
          nodeAffinity:
            {{affinity_stress.prefer }}:
              - weight: {{ affinity_conf.weight['hlf-fqdn'] }}
                preference:
                  matchExpressions:
                    - key: {{affinity_conf.keyprefix}}.hlf-fqdn/{{node.fullname}}
                      operator: In
                      values:
                        - "ok"
              - weight: {{affinity_conf.weight['hlf-type']}}
                preference:
                  matchExpressions:
                    - key: {{affinity_conf.keyprefix}}.hlf-type/{{node.type}}
                      operator: In
                      values:
                        - "ok"
              - weight: {{affinity_conf.weight['hlf-dn']}}
                preference:
                  matchExpressions:
                    - key: {{affinity_conf.keyprefix}}.hlf-dn/{{node.org}}
                      operator: In
                      values:
                        - "ok"
      volumes:
      - name: genesis-block
        configMap:
          name: genesis-blocks
      - name: keyfiles
        configMap:
          name: "keyfiles"
      initContainers:
      - name: setup
        image: busybox
        command:
        - sh
        - "-c"
        - |
          set -ex
          echo "/certs mapping: keyfiles/ordererOrganizations/{{node.org}}/orderers/{{node.fullname}}/"
          tar xzf /keyfiles/certs.tgz -C /certs --strip=5 `tar tzf  /keyfiles/certs.tgz | grep /ordererOrganizations/{{node.org}}/orderers/{{node.fullname}}/`
          find /certs
        volumeMounts:
          - { mountPath: "/keyfiles", name: "keyfiles" }
          - { mountPath: "/certs",    name: "{{ nodename }}-certs" }
      containers:
      - name: {{ nodename }}
        image: hyperledger/fabric-orderer:{{ fabric.release }}
        imagePullPolicy: IfNotPresent
        env:
        - { name: "ORDERER_GENERAL_LISTENADDRESS",             value: "0.0.0.0" }
        - { name: "ORDERER_GENERAL_BOOTSTRAPMETHOD",           value: "file" }
        - { name: "ORDERER_GENERAL_GENESISMETHOD",             value: "file" }
        - { name: "ORDERER_GENERAL_BOOTSTRAPFILE",             value: "/etc/hyperledger/genesisfile/genesis.block" }
        - { name: "ORDERER_GENERAL_GENESISFILE",               value: "/etc/hyperledger/genesisfile/genesis.block" }
        - { name: "ORDERER_GENERAL_LOCALMSPID",                value: "{{ node.mspid }}" }
        - { name: "ORDERER_GENERAL_LOCALMSPDIR",               value: "/certs/msp" }
        - { name: "ORDERER_GENERAL_TLS_ENABLED",               value: "true" }
        - { name: "ORDERER_GENERAL_TLS_SERVERHOSTOVERRIDE",    value: "{{ node.name }}" }
        - { name: "ORDERER_GENERAL_TLS_PRIVATEKEY",            value: "/certs/tls/server.key" }
        - { name: "ORDERER_GENERAL_TLS_CERTIFICATE",           value: "/certs/tls/server.crt" }
        - { name: "ORDERER_GENERAL_TLS_ROOTCAS",               value: "[/certs/tls/ca.crt]" }
        - { name: "ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE", value: "/certs/tls/server.crt" }
        - { name: "ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY",  value: "/certs/tls/server.key" }
        - { name: "ORDERER_GENERAL_CLUSTER_ROOTCAS",           value: "[/certs/tls/ca.crt]" }
        - { name: "ORDERER_GENERAL_FILELEDGER_LOCATION",       value: "/var/hyperledger/production" }
{%      if fabric.settings is defined and fabric.settings.orderer is defined %}
{%        for setting in (fabric.settings.orderer|dict2items) %}
        - { name: "{{ setting.key }}",                      value: "{{ setting.value }}" }
{%        endfor %}
{%      endif %}

        volumeMounts:
          - { mountPath: "/etc/hyperledger/genesisfile", name: "genesis-block" }
          - { mountPath: "/var/hyperledger/production", name: "{{ nodename }}-data"}
          - { mountPath: "/certs",                  name: "{{ nodename }}-certs" }
        command: ["orderer"]
{%   endfor %}
{% endif %}

{% if (DB_TYPE|lower) == "couchdb" and (allcouchdbs | length > 0) %}
# All couchDB nodes and services
{%   for node in allcouchdbs %}
{%     set nodename=(node.fullname|replace('.','-'))  %}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: {{ nodename }}
  name: {{ nodename }}
  namespace: "{{ NETNAME }}"
spec:
  selector:
    k8s-app: {{ nodename }}
  ports:
  - name: couchport
    port: 5984
    targetPort: 5984
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ nodename }}
  namespace: "{{ NETNAME }}"
spec:
  selector:
    matchLabels:
      k8s-app: {{ nodename }}
      hlf-type: {{ node.type }}
      hlf-fqdn: {{ node.fullname }}
      hlf-dn:  {{ node.org }}
      hlf-mspid: {{ node.mspid }}
  serviceName: {{ nodename }}
  replicas: 1
  volumeClaimTemplates:
  - metadata:
      name: {{ nodename }}-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
  template:
    metadata:
      labels:
        k8s-app: {{ nodename }}
        hlf-type: {{ node.type }}
        hlf-fqdn: {{ node.fullname }}
        hlf-dn:  {{ node.org }}
        hlf-mspid: {{ node.mspid }}
    spec:
      affinity:
          nodeAffinity:
            {{affinity_stress.prefer }}:
              - weight: {{ affinity_conf.weight['hlf-fqdn'] }}
                preference:
                  matchExpressions:
                    - key: {{affinity_conf.keyprefix}}.hlf-fqdn/{{node.fullname}}
                      operator: In
                      values:
                        - "ok"
              - weight: {{affinity_conf.weight['hlf-type']}}
                preference:
                  matchExpressions:
                    - key: {{affinity_conf.keyprefix}}.hlf-type/{{node.type}}
                      operator: In
                      values:
                        - "ok"
              - weight: {{affinity_conf.weight['hlf-dn']}}
                preference:
                  matchExpressions:
                    - key: {{affinity_conf.keyprefix}}.hlf-dn/{{node.org}}
                      operator: In
                      values:
                        - "ok"
      containers:
      - name: couchdb
        image: hyperledger/fabric-couchdb:latest
        imagePullPolicy: IfNotPresent
        env:
        - { name: "COUCHDB_USER",     value: "admin"   }
        - { name: "COUCHDB_PASSWORD", value: "{{ node.adminPassword }}" }
        volumeMounts:
        - { mountPath: "/opt/couchdb/data", name: "{{ nodename }}-data" }
{%   endfor %}
{% endif %}

{% if allpeers is defined and (allpeers | length > 0) %}
# All peer nodes and services
{%   for node in allpeers %}
{%     set nodename=(node.fullname|replace('.','-'))  %}
{%     set canodes=allcas|selectattr('org','equalto', node.org)|list %}
{%     set caname=((canodes|length)>0)|ternary(canodes[0].name, 'ca') %}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: {{ nodename }}
  name: {{ nodename }}
  namespace: "{{ NETNAME }}"
spec:
  selector:
    k8s-app: {{ nodename }}
  ports:
  - name: peerport
    port: 7051
    targetPort: 7051
  - name: chaincodeport
    port: 7052
    targetPort: 7052
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ nodename }}
  namespace: "{{ NETNAME }}"
spec:
  selector:
    matchLabels:
      k8s-app: {{ nodename }}
      hlf-type: {{ node.type }}
      hlf-fqdn: {{ node.fullname }}
      hlf-dn:  {{ node.org }}
      hlf-mspid: {{ node.mspid }}
  serviceName: {{ nodename }}
  replicas: 1
  volumeClaimTemplates:
  - metadata:
      name: {{ nodename }}-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
  - metadata:
      name: {{ nodename }}-certs
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Mi
  template:
    metadata:
      labels:
        k8s-app: {{ nodename }}
        hlf-type: {{ node.type }}
        hlf-fqdn: {{ node.fullname }}
        hlf-dn:  {{ node.org }}
        hlf-mspid: {{ node.mspid }}
    spec:
      affinity:
          nodeAffinity:
            {{affinity_stress.prefer }}:
              - weight: {{ affinity_conf.weight['hlf-fqdn'] }}
                preference:
                  matchExpressions:
                    - key: {{affinity_conf.keyprefix}}.hlf-fqdn/{{node.fullname}}
                      operator: In
                      values:
                        - "ok"
              - weight: {{affinity_conf.weight['hlf-type']}}
                preference:
                  matchExpressions:
                    - key: {{affinity_conf.keyprefix}}.hlf-type/{{node.type}}
                      operator: In
                      values:
                        - "ok"
              - weight: {{affinity_conf.weight['hlf-dn']}}
                preference:
                  matchExpressions:
                    - key: {{affinity_conf.keyprefix}}.hlf-dn/{{node.org}}
                      operator: In
                      values:
                        - "ok"
      volumes:
      - name: varlibdocker
        emptyDir: {}
      - name: rundind
        emptyDir:
          medium: Memory
      - name: keyfiles
        configMap:
          name: "keyfiles"
      initContainers:
      - name: setup
        image: busybox
        command:
        - sh
        - "-c"
        - |
          set -ex
          echo "/certs mapping: keyfiles/peerOrganizations/{{ node.org }}/peers/{{ node.fullname }}"
          tar xzf  /keyfiles/certs.tgz -C /certs --strip=5 `tar tzf /keyfiles/certs.tgz | grep /peerOrganizations/{{ node.org }}/peers/{{ node.fullname }}`
          find /certs
        volumeMounts:
          - { mountPath: "/keyfiles", name: "keyfiles" }
          - { mountPath: "/certs",    name: "{{ nodename }}-certs" }
      containers:
      - name: dind
        image: docker:20.10.3-dind
        resources:
          limits:
            cpu: "1"
          requests:
            cpu: "0.1"
        securityContext:
          privileged: true
        args:
          - dockerd
          - -H unix:///var/run/docker.sock
        volumeMounts:
        - name: varlibdocker
          mountPath: /var/lib/docker
        - name: rundind
          mountPath: /var/run
      - name: peer
        image: hyperledger/fabric-peer:{{ fabric.release }}
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true        
        env:
        - { name: "CORE_VM_ENDPOINT",                   value: "unix:///var/run/docker.sock" }
        - { name: "CORE_PEER_TLS_ENABLED",              value: "true" }
        - { name: "CORE_PEER_GOSSIP_USELEADERELECTION", value: "true" }
        - { name: "CORE_PEER_GOSSIP_ORGLEADER",         value: "false" }
        - { name: "CORE_PEER_PROFILE_ENABLED",          value: "false" }
        - { name: "CORE_PEER_TLS_CERT_FILE",            value: "/certs/tls/server.crt" }
        - { name: "CORE_PEER_TLS_KEY_FILE",             value: "/certs/tls/server.key" }
        - { name: "CORE_PEER_TLS_ROOTCERT_FILE",        value: "/certs/tls/ca.crt" }
        - { name: "CORE_CHAINCODE_EXECUTETIMEOUT",      value: "300s" }
        - { name: "CORE_PEER_ID",                       value: "{{ node.fullname }}" }
        - { name: "CORE_PEER_MSPCONFIGPATH",            value: "/certs/msp" }
        - { name: "CORE_PEER_ADDRESS",                  value: "{{ node.fullname | replace('.','-') }}:7051" }
        - { name: "CORE_PEER_LISTENADDRESS",            value: "0.0.0.0:7051" }
        - { name: "CORE_PEER_CHAINCODEADDRESS",         value: "{{ node.fullname | replace('.','-') }}:7052" }
        - { name: "CORE_PEER_CHAINCODELISTENADDRESS",   value: "0.0.0.0:7052" }
{%      set sameorgpeers = allpeers|selectattr('org', 'equalto', node.org)|list %}
{%      if sameorgpeers|length > 1 %}
{%        set otherpeer = sameorgpeers|difference([node])|list|first %}
        - { name: "CORE_PEER_GOSSIP_BOOTSTRAP",         value: "{{ otherpeer.fullname | replace('.','-') }}:7051" }
{%      else %}
        - { name: "CORE_PEER_GOSSIP_BOOTSTRAP",         value: "{{ node.fullname | replace('.','-') }}:7051" }
{%      endif %}
        - { name: "CORE_PEER_GOSSIP_EXTERNALENDPOINT",  value: "{{ node.url }}:{{ node.port }}" }
        - { name: "CORE_PEER_LOCALMSPID",               value: "{{ node.mspid }}" }
        - { name: "CORE_CHAINCODE_LOGGING_LEVEL",       value: "ERROR" }
{%      if fabric.settings is defined and fabric.settings.peer is defined %}
{%        for setting in (fabric.settings.peer|dict2items) %}
        - { name: "{{ setting.key }}", value: "{{ setting.value }}" }
{%        endfor %}
{%      endif %}
{%      if (DB_TYPE|lower) == "couchdb"  %}
        - { name: "CORE_LEDGER_STATE_STATEDATABASE",                  value: "CouchDB" }
        - { name: "CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS",   value: "{{ node.fullname | replace('.','-') }}-couchdb:5984" }
        - { name: "CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME",         value: "admin" }
        - { name: "CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD",         value: "{{ node.adminPassword }}" }
{%      endif %}
        volumeMounts:
          - { mountPath: "/var/hyperledger/production", name: "{{ nodename }}-data"}
          - { mountPath: "/var/run", name: "rundind" }
          - { mountPath: "/certs",    name: "{{ nodename }}-certs" }
        command: ["peer"]
        args: ["node", "start"]
{%   endfor %}
{% endif %}
